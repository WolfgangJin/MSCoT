"How to solve:
Step 1. Initialize balance as 0.
Step 2. Iterate through operations.
    -If operation is deposit, add amount to balance.
    -If operation is withdrawal, subtract amount from balance.
    -If balance falls below zero, return True.
Step 3. Return False. "
"How to solve:
Step 1. Initialize sum as 0 and product as 1.
Step 2. Iterate through numbers.
    -Add each number to sum.
    -Multiply each number to product.
Step 3. Return sum and product. "
"How to solve:
Step 1. Initialize an empty string result.
Step 2. Iterate through the characters in a and b.
    -If the characters are the same, append '0' to result.
    -Otherwise, append '1' to result.
Step 3. Return result. "
"How to solve:
Step 1. Check if the input list is empty. If it is, return nil.
Step 2. Initialize a variable ""longest_string"" as the first string in the list.
Step 3. Iterate through the remaining strings in the list.
    -If the length of the current string is greater than the length of the longest_string, update longest_string.
Step 4. Return the longest_string. "
"How to solve:
Step 1. Initialize a variable ""gcd"" as the minimum of a and b.
Step 2. Iterate from gcd to 1 in reverse order.
    -If both a and b are divisible by the current number, return the current number.
Step 3. Return 1. "
"How to solve:
Step 1. Split the input string into a list of numbers.
Step 2. Convert each number from string to integer.
Step 3. Sort the list of integers.
Step 4. Convert each integer back to a string.
Step 5. Join the sorted list of strings into a single string, separated by spaces.
Step 6. Return the sorted string. "
"How to solve:
Step 1. Find the smallest number in the list.
Step 2. Find the largest number in the list.
Step 3. Iterate through the list.
    -For each number, subtract the smallest number and divide by the range (largest number - smallest number).
Step 4. Return the rescaled list. "
"How to solve:
Step 1. Initialize an empty string called ""result"".
Step 2. Iterate through each character in the input string.
    -If the character is lowercase, convert it to uppercase and add it to ""result"".
    -If the character is uppercase, convert it to lowercase and add it to ""result"".
    -Otherwise, add the character as is to ""result"".
Step 3. Return ""result"". "
"How to solve:
Step 1. Initialize an empty list called ""result"".
Step 2. Iterate through each element in the input list.
    -If the element is positive, append it to the ""result"" list.
Step 3. Return the ""result"" list. "
"How to solve:
Step 1. If n is less than 2, return False.
Step 2. Iterate from 2 to the square root of n.
    -If n is divisible by any number in this range, return False.
Step 3. If no number divides n, return True. "
"How to solve:
Step 1. Create an empty list called ""result"".
Step 2. Iterate through each element in the input list.
    -If the element is not already in the ""result"" list, add it to the list.
Step 3. Sort the ""result"" list.
Step 4. Return the sorted ""result"" list. "
"How to solve:
Step 1. Initialize a list to store Fibonacci numbers.
Step 2. Initialize a list to store prime Fibonacci numbers.
Step 3. Initialize the first two Fibonacci numbers as 1 and 2.
Step 4. Iterate from 3 to n.
    - Calculate the next Fibonacci number by adding the previous two numbers.
    - Check if the Fibonacci number is prime.
        - If it is prime, add it to the list of prime Fibonacci numbers.
Step 5. Return the last prime Fibonacci number. "
"How to solve:
Step 1. Iterate through the list.
Step 2. For each element, check if there are two more elements in the list that sum to its negative.
Step 3. If such three elements are found, return True.
Step 4. If no three elements are found that sum to zero, return False. "
"How to solve:
Step 1. Iterate through the list.
Step 2. For each element, check if there is another element in the list that sums to zero.
    -If found, return True.
Step 3. If no pair is found, return False. "
"How to solve:
Step 1. Initialize a list with the first four elements of the fib4 sequence: [0, 0, 2, 0].
Step 2. Iterate from 4 to n.
    -Compute the next element by summing the last four elements of the list.
    -Append the computed element to the list.
Step 3. Return the last element of the list, which is the n-th element of the fib4 sequence. "
"How to solve:
Step 1. Sort the list l in ascending order.
Step 2. Check if the length of l is odd or even.
    -If odd, return the middle element of l.
    -If even, return the average of the two middle elements of l. "
"How to solve:
Step 1. Initialize a variable ""reverse"" as an empty string.
Step 2. Iterate through each character in the text in reverse order.
    -Add each character to the ""reverse"" string.
Step 3. If the ""reverse"" string is equal to the original text, return True.
    -Otherwise, return False. "
"How to solve:
Step 1. Initialize an empty string called ""result"".
Step 2. Iterate through each character in the input string.
    -If the character is a vowel, skip it.
    -Otherwise, add it to the ""result"" string.
Step 3. Return the ""result"" string. "
"How to solve:
Step 1. Iterate through the list l.
Step 2. If any number in l is above threshold t, return False.
Step 3. If all numbers in l are below threshold t, return True. "
"How to solve:
Step 1. Add x and y.
Step 2. Return the result. "
"How to solve:
Step 1. Convert both strings to sets to remove duplicate characters.
Step 2. Check if the sets are equal.
    -If they are equal, return True.
    -If they are not equal, return False. "
"How to solve:
Step 1. If n is 1, return 1.
Step 2. If n is 2, return 2.
Step 3. Initialize variables a and b as 1 and 2 respectively.
Step 4. Iterate from 3 to n.
    -Calculate the next Fibonacci number by adding a and b.
    -Update a and b to the next Fibonacci numbers.
Step 5. Return b. "
"How to solve:
Step 1. Convert both lists to sets to remove duplicates.
Step 2. Find the intersection of the two sets.
Step 3. Sort the intersection set.
Step 4. Return the sorted intersection set. "
"How to solve:
Step 1. Initialize a variable ""factor"" as 2.
Step 2. Iterate while factor * factor <= n.
    -If n is divisible by factor, divide n by factor.
    -Otherwise, increment factor by 1.
Step 3. Return n as the largest prime factor. "
"How to solve:
Step 1. Initialize a variable sum as 0.
Step 2. Iterate from 1 to n.
    -Add each number to sum.
Step 3. Return the value of sum. "
"How to solve:
Step 1. Initialize an empty list to store the coefficients of the derivative.
Step 2. Iterate through the coefficients of the polynomial.
    -For each coefficient, calculate the derivative and append it to the list.
Step 3. Return the list of coefficients of the derivative. "
"How to solve:
Step 1. If n is 0, return 0.
Step 2. If n is 1, return 0.
Step 3. Initialize variables a, b, and c as 0, 1, and 1 respectively.
Step 4. Iterate from 2 to n.
    -Compute the next element in the fibfib sequence by adding a, b, and c.
    -Update a, b, and c to the next elements in the sequence.
Step 5. Return c. "
"How to solve:
Step 1. Initialize a variable count as 0.
Step 2. Iterate through each character in the string.
    -If the character is 'a', 'e', 'i', 'o', or 'u', increment count by 1.
    -If the character is 'y' and it is at the end of the string, increment count by 1.
Step 3. Return count. "
"How to solve:
Step 1. Initialize a variable `result` as -1.
Step 2. Iterate through the list.
    - Initialize a variable `frequency` as 0.
    - Iterate through the list again.
        - If the current element is equal to the current element, increment `frequency` by 1.
    - If `frequency` is greater than or equal to the current element, update `result` to the current element.
Step 3. Return `result`. "
"How to solve:
Step 1. Check if the three sides form a valid triangle.
    -If not, return -1.
Step 2. Calculate the area of the triangle using Heron's formula.
Step 3. Round the area to 2 decimal points.
Step 4. Return the rounded area. "
"How to solve:
Step 1. Check if q is balanced.
    -If not, return False.
Step 2. Calculate the sum of elements in q.
Step 3. Check if the sum is less than or equal to w.
    -If not, return False.
Step 4. Return True. "
"How to solve:
Step 1. Check if a is less than 100.
Step 2. Iterate through all possible values of a from 2 to a-1.
    -Check if a is divisible by i.
    -If it is, check if i is prime.
        -If it is, increment a counter.
        -If it is not, continue to the next iteration of i.
    -If a counter is equal to 3, return True.
Step 3. Return False. "
"How to solve:
Step 1. Initialize an empty string to store the binary representation.
Step 2. Convert the decimal number to binary using the bin() function.
Step 3. Remove the '0b' prefix from the binary representation.
Step 4. Add 'db' at the beginning and at the end of the string.
Step 5. Return the binary representation as a string. "
"How to solve:
Step 1. Check if the length of the string is at least 3. If not, return False.
Step 2. Iterate through the string.
    -Check if each 3 consecutive letters are distinct.
    -If not, return False.
Step 3. Return True. "
"How to solve:
Step 1. Create a dictionary to map GPAs to letter grades.
Step 2. Initialize an empty list to store the letter grades.
Step 3. Iterate through each grade in the input list.
    -If the grade is greater than or equal to 4.0, append 'A+' to the list.
    -If the grade is greater than 3.7, append 'A' to the list.
    -If the grade is greater than 3.3, append 'A-' to the list.
    -If the grade is greater than 3.0, append 'B+' to the list.
    -If the grade is greater than 2.7, append 'B' to the list.
    -If the grade is greater than 2.3, append 'B-' to the list.
    -If the grade is greater than 2.0, append 'C+' to the list.
    -If the grade is greater than 1.7, append 'C' to the list.
    -If the grade is greater than 1.3, append 'C-' to the list.
    -If the grade is greater than 1.0, append 'D+' to the list.
    -If the grade is greater than 0.7, append 'D' to the list.
    -If the grade is greater than 0.0, append 'D-' to the list.
    -Otherwise, append 'E' to the list.
Step 4. Return the list of letter grades. "
"How to solve:
Step 1. Get the length of the string.
Step 2. Check if the length is a prime number.
    -If the length is less than or equal to 1, return False.
    -Otherwise, iterate from 2 to the square root of the length.
        -If the length is divisible by any number in the range, return False.
    -Return True. "
"How to solve:
Step 1. Convert the integer N to binary representation.
Step 2. Initialize a variable sum_digits as 0.
Step 3. Iterate through each digit in the binary representation.
    -Convert the digit to an integer.
    -Add the integer value to sum_digits.
Step 4. Convert sum_digits to a string.
Step 5. Return the binary string representation of sum_digits. "
"How to solve:
Step 1. Initialize an empty list to store the coordinates.
Step 2. Iterate through each row in the list.
    -Initialize an empty list to store the coordinates of the current row.
    -Iterate through each column in the current row.
        -If the value at the current column is equal to x, append the coordinates (row, column) to the list.
    -Sort the list of coordinates of the current row in descending order of columns.
    -Append the list of coordinates of the current row to the list of coordinates.
Step 3. Sort the list of coordinates in ascending order of rows.
Step 4. Return the list of coordinates. "
"How to solve:
Step 1. Check if the list is empty. If it is, return None.
Step 2. Find the smallest element in the list.
Step 3. Remove the smallest element from the list.
Step 4. Check if the list is empty. If it is, return None.
Step 5. Find the smallest element in the list.
Step 6. Remove the smallest element from the list.
Step 7. Return the smallest element of the list. "
"How to solve:
Step 1. Split the string into a list of sentences using the delimiters '.', '?', or '!'.
Step 2. Initialize a count variable to 0.
Step 3. Iterate through each sentence in the list.
    -If the sentence starts with the word 'I', increment the count variable.
Step 4. Return the count variable. "
"How to solve:
Step 1. Initialize a variable max_prime as 0.
Step 2. Iterate through the list.
    -Check if the current number is prime.
        -If it is prime, check if it is larger than max_prime.
            -If it is larger, update max_prime.
Step 3. If max_prime is not 0, calculate the sum of its digits.
Step 4. Return the sum of digits. "
"How to solve:
Step 1. Check if the given dictionary is empty. If it is, return False.
Step 2. Iterate through the keys of the dictionary.
    -Check if each key is a string.
    -Check if the key is in lower case or upper case.
    -If any key does not meet the conditions, return False.
Step 3. Return True. "
"How to solve:
Step 1. Convert the value to a float.
Step 2. Use the round() function to round the float to the nearest integer.
Step 3. If the rounded float is equidistant from two integers, round it away from zero.
    -To do this, check if the absolute difference between the rounded float and the floor of the float is greater than the absolute difference between the rounded float and the ceiling of the float.
    -If it is, return the ceiling of the float.
    -Otherwise, return the floor of the float.
Step 4. Return the rounded integer. "
"How to solve:
Step 1. Initialize an empty list to store the number of stones in each level.
Step 2. Initialize a variable to store the current number of stones.
Step 3. Iterate from 1 to n.
    - If n is odd, add the next odd number to the current number of stones.
    - If n is even, add the next even number to the current number of stones.
    - Append the current number of stones to the list.
Step 4. Return the list of number of stones in each level. "
"How to solve:
Step 1. Split the string into words using commas or spaces as the delimiter.
Step 2. Return the array of words. "
"How to solve:
Step 1. Initialize a variable ""num"" as -1.
Step 2. Iterate through the range from x to y (inclusive).
    -If the current number is even and greater than num, update num.
Step 3. Return num. "
"How to solve:
Step 1. Check if n is greater than m. If so, return -1.
Step 2. Compute the average of the integers from n to m (including n and m).
Step 3. Round the average to the nearest integer.
Step 4. Convert the rounded average to binary.
Step 5. Return the binary representation of the rounded average. "
"How to solve:
Step 1. Initialize an empty list.
Step 2. Iterate from 1 to n.
    -If the index is even, append the factorial of the index to the list.
    -Otherwise, calculate the sum of numbers from 1 to the index and append it to the list.
Step 3. Return the list. "
"How to solve:
Step 1. Initialize a counter for even and odd palindromes as 0.
Step 2. Iterate through numbers from 1 to n.
    -Check if the number is a palindrome.
    -If the number is even, increment the counter for even palindromes.
    -If the number is odd, increment the counter for odd palindromes.
Step 3. Return the counter for even palindromes and the counter for odd palindromes as a tuple. "
"How to solve:
Step 1. If the given array is empty, return True.
Step 2. Iterate through the array.
    -If the current element is greater than the next element, return False.
Step 3. Return True. "
"How to solve:
Step 1. Iterate through each element in lst1.
Step 2. If the element is odd, check if there is an even number in lst2.
    -If there is, exchange the elements between lst1 and lst2.
    -If there is no even number in lst2, return ""NO"".
Step 3. If all elements in lst1 are even, return ""YES"". "
"How to solve:
Step 1. Initialize an empty string called ""result"".
Step 2. Iterate through each character in s.
    -If the character is not equal to any character in c, add it to ""result"".
Step 3. Check if ""result"" is equal to its reverse.
    -If it is, return (""result"", True).
    -If it is not, return (""result"", False). "
"How to solve:
Step 1. Initialize a variable ""count"" to keep track of the number of times buckets are lowered.
Step 2. Iterate through each row in the grid.
    - Initialize a variable ""filled"" to keep track of the total amount of water filled.
    - Iterate through each well in the row.
        - If the well is not empty (grid[i][j] == 1), increment ""filled"" by the capacity.
        - If the well is empty (grid[i][j] == 0), break the loop.
    - If ""filled"" is equal to the total capacity of the row, increment ""count"" by 1.
Step 3. Return ""count"". "
"How to solve:
Step 1. Initialize an empty list to store the words.
Step 2. Split the string into a list of words.
Step 3. Iterate through each word in the list.
    -Count the number of consonants in the word.
    -If the count is equal to n, add the word to the list.
Step 4. Return the list of words. "
"How to solve:
Step 1. Sort the array in descending order.
Step 2. Return the first k elements of the sorted array. "
"How to solve:
Step 1. Initialize a variable sum as 0.
Step 2. Iterate through the first k elements of arr.
    -For each element, add it to sum.
Step 3. Return the sum. "
"How to solve:
Step 1. Check if the intervals intersect. If not, return ""NO"".
Step 2. Find the start of the intersection by taking the maximum of the start values.
Step 3. Find the end of the intersection by taking the minimum of the end values.
Step 4. Calculate the length of the intersection by subtracting the start from the end.
Step 5. Check if the length is a prime number. If not, return ""NO"".
Step 6. Return ""YES"". "
"How to solve:
Step 1. Initialize an empty list to store the Tribonacci sequence.
Step 2. Initialize the first three numbers of the sequence as 1, 3, and 2.
Step 3. If n is less than 3, return the first n numbers of the sequence.
Step 4. Iterate from 3 to n (inclusive).
    - Calculate the next number in the sequence using the recurrence formula.
    - Append the calculated number to the list.
Step 5. Return the list of the Tribonacci sequence. "
"How to solve:
Step 1. Initialize product as 1.
Step 2. Iterate through digits of n.
    -If digit is odd, multiply it with product.
Step 3. If product is still 1, return 0.
Step 4. Return product. "
"How to solve:
Step 1. Initialize a stack to keep track of opening brackets.
Step 2. Iterate through each character in the string.
    -If the character is an opening bracket, push it onto the stack.
    -If the character is a closing bracket, check if the stack is empty. If it is, return False.
    -If the stack is not empty, pop the top element from the stack.
Step 3. After iterating through all characters, check if the stack is empty. If it is, return False.
Step 4. Return True. "
"How to solve:
Step 1. Initialize a variable sum_squares as 0.
Step 2. Iterate through the elements in lst.
    -Round each element to the upper int(Ceiling).
    -Square the rounded element.
    -Add the squared element to sum_squares.
Step 3. Return sum_squares. "
"How to solve:
Step 1. Check if the length of the given string is 0. If it is, return False.
Step 2. Get the last character of the string.
Step 3. Check if the last character is an alphabetical character. If it is not, return False.
Step 4. Check if the last character is a part of a word. If it is, return False.
Step 5. Return True. "
"How to solve:
Step 1. Initialize an empty list called ""sorted_arr"".
Step 2. Iterate through each element in the input array.
    -Find the largest index of an element that is not greater than or equal to the current element.
    -If such an index exists, append the index to the ""sorted_arr"".
    -If no such index exists, return -1.
Step 3. If the ""sorted_arr"" is equal to the range of indices in the input array, return the ""sorted_arr"".
Step 4. Otherwise, return -1. "
"How to solve:
Step 1. Initialize variables 'a' and 'b' as None.
Step 2. Iterate through the list.
    -If the current element is negative and 'a' is None or the current element is greater than 'a', update 'a' with the current element.
    -If the current element is positive and 'b' is None or the current element is less than 'b', update 'b' with the current element.
Step 3. Return the tuple (a, b). "
"How to solve:
Step 1. Initialize a variable ""result"" as 1.
Step 2. Iterate from 1 to n.
    -Multiply ""result"" by the current number in the iteration.
Step 3. Return ""result"". "
"How to solve:
Step 1. Split the sentence into a list of words.
Step 2. Initialize an empty list to store the prime words.
Step 3. Iterate through each word in the list.
    -Check if the length of the word is a prime number.
    -If it is, add the word to the list of prime words.
Step 4. Join the prime words with a space to form the new sentence.
Step 5. Return the new sentence. "
"How to solve:
Step 1. Convert x and n from string representation to integers.
Step 2. Check if x * n evaluates to a whole number.
    -If it does, return True.
    -If it doesn't, return False. "
"How to solve:
Step 1. Create a helper function to calculate the sum of digits for a given number.
Step 2. Sort the given list of integers based on the sum of their digits.
    -If there are several items with similar sum of digits, order them based on their index in original list.
Step 3. Return the sorted list. "
"How to solve:
Step 1. Initialize a count variable as 0.
Step 2. Iterate through each number in the array.
    -Check if the number is greater than 10 and both its first and last digits are odd.
    -If it meets the condition, increment the count variable.
Step 3. Return the count variable. "
"How to solve:
Step 1. Initialize an empty list called ""array"".
Step 2. Iterate from 1 to n.
    - For each i, calculate the value of a[i] = i * i - i + 1.
    - Append a[i] to the array.
Step 3. Initialize a counter variable called ""count"" to 0.
Step 4. Iterate through the array.
    - For each element a[i], iterate through the array again.
        - For each element a[j], iterate through the array again.
            - For each element a[k], check if i < j < k and if a[i] + a[j] + a[k] is divisible by 3.
                - If it is, increment count by 1.
Step 5. Return count. "
"How to solve:
Step 1. Create a list of planet names in the order closest to the sun.
Step 2. Check if planet1 and planet2 are valid planet names.
    -If not, return an empty tuple.
Step 3. Find the index of planet1 and planet2 in the list.
Step 4. Iterate through the list and add planets whose orbits are located between the orbit of planet1 and the orbit of planet2.
Step 5. Sort the list by proximity to the sun.
Step 6. Return the tuple of sorted planets. "
"How to solve:
Step 1. Check if n is prime.
    -If n is prime, return x.
    -Otherwise, return y. "
"How to solve:
Step 1. Initialize a variable sum_squares as 0.
Step 2. Iterate through the elements in the input list.
    -If the element is an integer and odd, square it and add it to sum_squares.
Step 3. Return sum_squares. "
"How to solve:
Step 1. Initialize a variable strongest_extension as an empty string.
Step 2. Initialize a variable max_strength as -infinity.
Step 3. Iterate through each extension in the list of extensions.
    -Calculate the strength of the extension using the formula CAP - SM.
    -If the strength is greater than max_strength, update max_strength and strongest_extension.
Step 4. Return the string class_name.strongest_extension. "
"How to solve:
Step 1. Check if the second word or any of its rotations is a substring in the first word.
Step 2. Return True if found, False otherwise. "
"How to solve:
Step 1. Create a dictionary to map the integer values to their corresponding roman numeral symbols.
Step 2. Initialize an empty string to store the roman numeral representation.
Step 3. Iterate through the dictionary in descending order of the integer values.
    -While the number is greater than or equal to the current integer value:
        -Append the corresponding roman numeral symbol to the string.
        -Subtract the current integer value from the number.
Step 4. Return the string. "
"How to solve:
Step 1. Check if the sum of any two sides is greater than the third side.
Step 2. If the condition is true for all three combinations of sides, return True.
Step 3. Otherwise, return False. "
"How to solve:
Step 1. Initialize an empty string called ""result"".
Step 2. Iterate through each character in the input string.
    -If the character is a letter, reverse its case and add it to ""result"".
    -Otherwise, add the character as it is to ""result"".
Step 3. If ""result"" is empty, reverse the string and return it.
Step 4. Return ""result"". "
"How to solve:
Step 1. Check if the input string is empty. If it is, return nil.
Step 2. Use the md5 hash function to calculate the hash of the input string.
Step 3. Return the md5 hash string. "
"How to solve:
Step 1. Initialize an empty list to store the even digits.
Step 2. Iterate through the range from a to b (inclusive).
    -If the current number is even and not already in the list, add it to the list.
Step 3. Return the list of even digits. "
