"How to solve:
Step 1. Initialize balance as 0.
Step 2. Iterate through operations.
    -If operation is deposit, add amount to balance.
    -If operation is withdrawal, subtract amount from balance.
    -If balance falls below zero, return True.
Step 3. Return False. "
"How to solve:
Step 1. Initialize sum as 0 and product as 1.
Step 2. Iterate through numbers.
    -Add each number to sum.
    -Multiply each number to product.
Step 3. Return tuple of sum and product. "
"How to solve:
Step 1. Initialize an empty string to store the result.
Step 2. Iterate through the characters of strings a and b.
    -If the characters are the same, append '0' to the result string.
    -Otherwise, append '1' to the result string.
Step 3. Return the result string. "
"How to solve:
Step 1. Check if the input list is empty. If it is, return None.
Step 2. Initialize the longest string as the first string in the list.
Step 3. Iterate through the remaining strings in the list.
    -If the length of the current string is greater than the length of the longest string, update the longest string.
Step 4. Return the longest string. "
"How to solve:
Step 1. Initialize a variable ""gcd"" as the maximum of a and b.
Step 2. Iterate from gcd to 1 in reverse order.
    -If both a and b are divisible by the current number, return the current number.
Step 3. Return 1. "
"How to solve:
Step 1. Split the input string into an array of numbers.
Step 2. Convert each number from string to number.
Step 3. Sort the array of numbers in ascending order.
Step 4. Convert each number back to string.
Step 5. Join the sorted array of numbers into a string, separated by spaces.
Step 6. Return the sorted string. "
"How to solve:
Step 1. Find the smallest number in the list.
Step 2. Find the largest number in the list.
Step 3. Iterate through the list.
    -For each number, subtract the smallest number and divide by the range (largest number - smallest number).
Step 4. Return the rescaled list. "
"How to solve:
Step 1. Initialize an empty string.
Step 2. Iterate through each character in the input string.
    -If the character is lowercase, convert it to uppercase and add it to the new string.
    -If the character is uppercase, convert it to lowercase and add it to the new string.
    -Otherwise, add the character as is to the new string.
Step 3. Return the new string. "
"How to solve:
Step 1. Initialize an empty list to store positive numbers.
Step 2. Iterate through the input list.
    -If a number is positive, add it to the list of positive numbers.
Step 3. Return the list of positive numbers. "
"How to solve:
Step 1. If n is less than 2, return False.
Step 2. Iterate from 2 to the square root of n.
    -If n is divisible by any number in this range, return False.
Step 3. If no number divides n, return True. "
"How to solve:
Step 1. Create an empty list called ""result"".
Step 2. Iterate through each element in the input list.
    -If the element is not already in the ""result"" list, add it to the list.
Step 3. Sort the ""result"" list.
Step 4. Return the sorted ""result"" list. "
"How to solve:
Step 1. Initialize variables for Fibonacci numbers and prime numbers.
Step 2. Initialize the first two Fibonacci numbers as 1 and 2.
Step 3. Iterate from 3 to n.
    - Calculate the next Fibonacci number by adding the previous two numbers.
    - Check if the Fibonacci number is prime.
        - If it is prime, return the Fibonacci number.
Step 4. Return the n-th Fibonacci number. "
"How to solve:
Step 1. Iterate through the list of integers.
Step 2. For each integer, check if there are two more integers in the list that sum to its negative.
    -If there are, return True.
Step 3. If no three distinct integers are found that sum to zero, return False. "
"How to solve:
Step 1. Iterate through the list of integers.
Step 2. For each integer, check if there is another integer in the list that sums to its negative.
Step 3. If such a pair exists, return True.
Step 4. If no such pair is found, return False. "
"How to solve:
Step 1. Initialize a list with the first four elements of the fib4 sequence: [0, 0, 2, 0].
Step 2. Iterate from 4 to n.
    -Compute the next element by summing the last four elements of the list.
    -Append the computed element to the list.
Step 3. Return the last element of the list. "
"How to solve:
Step 1. Sort the list in ascending order.
Step 2. Check if the length of the list is odd or even.
    -If odd, return the middle element.
    -If even, return the average of the two middle elements. "
"How to solve:
Step 1. Initialize a variable ""reverse"" as an empty string.
Step 2. Iterate through each character in the input string in reverse order.
    -Add each character to the ""reverse"" string.
Step 3. If the input string is equal to the ""reverse"" string, return True.
    -Otherwise, return False. "
"How to solve:
Step 1. Initialize an empty string called ""result"".
Step 2. Iterate through each character in the input string.
    -If the character is a vowel, skip it.
    -Otherwise, add it to the ""result"" string.
Step 3. Return the ""result"" string. "
"How to solve:
Step 1. Iterate through the list l.
Step 2. If any number in l is above threshold t, return False.
Step 3. If all numbers in l are below threshold t, return True. "
"How to solve:
Step 1. Add x and y.
Step 2. Return the result. "
"How to solve:
Step 1. Convert both strings to lowercase.
Step 2. Sort both strings.
Step 3. If sorted strings are equal, return True. Otherwise, return False. "
"How to solve:
Step 1. If n is 0 or 1, return n.
Step 2. Initialize variables a and b as 0 and 1.
Step 3. Iterate from 2 to n.
    -Set a to b and b to the sum of a and b.
Step 4. Return b. "
"How to solve:
Step 1. Convert both lists to sets to remove duplicates.
Step 2. Find the intersection of the two sets.
Step 3. Sort the intersection set.
Step 4. Convert the sorted set back to a list.
Step 5. Return the list. "
"How to solve:
Step 1. Initialize a variable ""factor"" as 2.
Step 2. Iterate while factor * factor <= n.
    -If n is divisible by factor, divide n by factor.
    -Otherwise, increment factor by 1.
Step 3. Return n as the largest prime factor. "
"How to solve:
Step 1. Initialize a variable sum as 0.
Step 2. Iterate from 1 to n.
    -Add each number to sum.
Step 3. Return sum. "
"How to solve:
Step 1. Initialize an empty array to store the coefficients of the derivative.
Step 2. Iterate through the coefficients of the polynomial.
    -For each coefficient, calculate the derivative and append it to the derivative array.
Step 3. Return the derivative array. "
"How to solve:
Step 1. If n is less than 0, return -1.
Step 2. If n is 0 or 1, return 0.
Step 3. Initialize variables a, b, and c as 0, 1, and 1 respectively.
Step 4. Iterate from 2 to n.
    -Compute the next element of the fibfib sequence by adding a, b, and c.
    -Update a, b, and c to the next elements.
Step 5. Return c. "
"How to solve:
Step 1. Initialize a variable count as 0.
Step 2. Iterate through each character in the string.
    -If the character is a vowel ( 'a', 'e', 'i', 'o', 'u' ), increment count by 1.
    -If the character is 'y' and it is at the end of the string, increment count by 1.
Step 3. Return count. "
"How to solve:
Step 1. Initialize a dictionary to store the frequency of each number in the list.
Step 2. Iterate through the list and update the frequency dictionary.
Step 3. Iterate through the list again and check if the current number is greater than 0 and its frequency is greater than or equal to the number itself.
    -If true, return the number.
Step 4. If no such number exists, return -1. "
"How to solve:
Step 1. Check if the three sides form a valid triangle by checking if the sum of any two sides is greater than the third side.
    -If not, return -1.
Step 2. Calculate the area of the triangle using the formula: area = (s * (s - a) * (s - b) * (s - c)) ** 0.5, where s is the semi-perimeter of the triangle.
Step 3. Round the calculated area to 2 decimal points.
Step 4. Return the rounded area. "
"How to solve:
Step 1. Check if the sum of the elements in q is less than or equal to w.
    -If not, return False.
Step 2. Check if q is balanced (palindromic).
    -If not, return False.
Step 3. Return True. "
"How to solve:
Step 1. Check if a is less than 100.
Step 2. Iterate through all possible values of a from 2 to a-1.
    -Check if a is divisible by i.
    -If it is, check if i is prime.
        -If it is, decrement the count of prime numbers by 1.
        -If the count of prime numbers is 3, return True.
Step 3. Return False. "
"How to solve:
Step 1. Initialize an empty string to store the binary representation.
Step 2. Convert the decimal number to binary using the binary operator.
Step 3. Add the 'db' characters at the beginning and end of the string.
Step 4. Return the binary string. "
"How to solve:
Step 1. Check if the length of the string is at least 3. If not, return False.
Step 2. Iterate through the string.
    -Check if each 3 consecutive letters are distinct.
    -If not, return False.
Step 3. Return True. "
"How to solve:
Step 1. Initialize an empty array to store the letter grades.
Step 2. Iterate through each grade in the input array.
    - If the grade is between 4 and 4.001, append 'A+' to the letter grades array.
    - If the grade is between 3.7 and 4, append 'A' to the letter grades array.
    - If the grade is between 3.3 and 3.7, append 'A-' to the letter grades array.
    - If the grade is between 3 and 3.3, append 'B+' to the letter grades array.
    - If the grade is between 2.7 and 3, append 'B' to the letter grades array.
    - If the grade is between 2.3 and 2.7, append 'B-' to the letter grades array.
    - If the grade is between 2 and 2.3, append 'C+' to the letter grades array.
    - If the grade is between 1.7 and 2, append 'C' to the letter grades array.
    - If the grade is between 1.3 and 1.7, append 'C-' to the letter grades array.
    - If the grade is between 1 and 1.3, append 'D+' to the letter grades array.
    - If the grade is between 0.7 and 1, append 'D' to the letter grades array.
    - If the grade is between 0 and 0.7, append 'D-' to the letter grades array.
    - Otherwise, append 'E' to the letter gr"
"How to solve:
Step 1. Get the length of the string.
Step 2. Check if the length is a prime number.
    -If the length is less than or equal to 1, return False.
    -Iterate from 2 to the square root of the length.
        -If the length is divisible by any number in the range, return False.
    -Return True. "
"How to solve:
Step 1. Convert the integer N to binary representation.
Step 2. Initialize a variable sum_digits as 0.
Step 3. Iterate through each digit in the binary representation.
    -Add the digit to sum_digits.
Step 4. Convert sum_digits to a string.
Step 5. Return the binary string representation of sum_digits. "
"How to solve:
Step 1. Initialize an empty list to store the coordinates.
Step 2. Iterate through each row in the list.
    -Initialize an empty list to store the coordinates of the current row.
    -Iterate through each column in the current row.
        -If the value at the current column is equal to the given number x, append the coordinates (row, column) to the list.
    -Sort the list of coordinates of the current row in descending order based on the columns.
    -Append the list of coordinates of the current row to the list of coordinates.
Step 3. Sort the list of coordinates in ascending order based on the rows.
Step 4. Return the list of coordinates. "
"How to solve:
Step 1. Check if the list is empty. If it is, return None.
Step 2. Find the smallest element in the list.
Step 3. Remove the smallest element from the list.
Step 4. Find the second smallest element in the modified list.
Step 5. Return the second smallest element. "
"How to solve:
Step 1. Initialize a count variable as 0.
Step 2. Split the string into sentences using the delimiter characters '.', '?', or '!'.
Step 3. Iterate through each sentence.
    -If the sentence starts with the word ""I"", increment the count variable.
Step 4. Return the count variable. "
"How to solve:
Step 1. Initialize a variable max_prime to 0.
Step 2. Iterate through the list.
    -Check if the current number is prime.
        -If it is prime, check if it is larger than max_prime.
            -If it is larger, update max_prime to the current number.
Step 3. If max_prime is still 0, return 0.
Step 4. Otherwise, calculate the sum of the digits of max_prime.
Step 5. Return the sum. "
"How to solve:
Step 1. Check if the dictionary is empty. If it is, return False.
Step 2. Iterate through the keys in the dictionary.
    -Check if each key is a string.
    -Check if the key is in lower case or upper case.
    -If any key does not meet the conditions, return False.
Step 3. Return True. "
"How to solve:
Step 1. Convert the given number string to a float.
Step 2. Use the math.round() function to round the float to the nearest integer.
Step 3. If the rounded float is equidistant from two integers, round it away from zero.
    -To do this, check if the absolute difference between the rounded float and the floor of the float is greater than the absolute difference between the rounded float and the ceiling of the float.
    -If it is, return the ceiling of the float.
    -Otherwise, return the floor of the float.
Step 4. Return the rounded integer. "
"How to solve:
Step 1. Initialize an empty list to store the number of stones in each level.
Step 2. Initialize a variable to store the current number of stones.
Step 3. Iterate from 1 to n.
    - If n is odd, add the current number of stones plus 1 to the list.
    - If n is even, add the current number of stones plus 2 to the list.
    - Update the current number of stones to be the next odd number.
Step 4. Return the list of number of stones in each level. "
"How to solve:
Step 1. Split the string into words using commas or spaces as the delimiter.
Step 2. Return the array of words. "
"How to solve:
Step 1. Initialize a variable ""result"" as -1.
Step 2. Iterate through the range from x to y (inclusive).
    -If the current number is even and greater than result, update result.
Step 3. Return result. "
"How to solve:
Step 1. Check if n is greater than m. If so, return -1.
Step 2. Compute the average of the integers from n to m (including n and m).
Step 3. Round the average to the nearest integer.
Step 4. Convert the rounded average to binary.
Step 5. Return the binary representation as a string. "
"How to solve:
Step 1. Initialize an empty list.
Step 2. Iterate from 1 to n.
    -If the index is even, append the factorial of the index to the list.
    -Otherwise, append the sum of numbers from 1 to the index to the list.
Step 3. Return the list. "
"How to solve:
Step 1. Initialize a counter for even and odd palindromes as 0.
Step 2. Iterate through numbers from 1 to n.
    -Check if the number is a palindrome.
    -If the number is even, increment the counter for even palindromes.
    -If the number is odd, increment the counter for odd palindromes.
Step 3. Return the counter for even palindromes and the counter for odd palindromes as a tuple. "
"How to solve:
Step 1. If the given array is empty, return True.
Step 2. Iterate through the array.
    -If the current element is greater than the next element, return False.
Step 3. Return True. "
"How to solve:
Step 1. Iterate through lst1.
Step 2. If an element in lst1 is odd, check if there is an element in lst2 that is the same as the element in lst1.
    -If there is, continue to the next element in lst1.
    -If there is no such element, return ""NO"".
Step 3. Return ""YES"". "
"How to solve:
Step 1. Initialize an empty string called ""result"".
Step 2. Iterate through each character in s.
    -If the character is not equal to any character in c, add it to ""result"".
Step 3. Check if ""result"" is equal to its reverse.
    -If it is, return a tuple containing ""result"" and True.
    -If it is not, return a tuple containing ""result"" and False. "
"How to solve:
Step 1. Initialize a variable to keep track of the number of times the buckets have been lowered.
Step 2. Iterate through each row in the grid.
    - Initialize a variable to keep track of the total amount of water extracted.
    - Iterate through each well in the row.
        - If the well is filled (grid[row][well] == 1), continue to the next well.
        - Otherwise, extract as much water as possible from the well (up to the capacity).
        - Add the amount of water extracted to the total amount of water extracted.
    - If the total amount of water extracted is greater than or equal to the capacity, increment the number of times the buckets have been lowered.
Step 3. Return the number of times the buckets have been lowered. "
"How to solve:
Step 1. Initialize an empty list to store the selected words.
Step 2. Split the input string into a list of words.
Step 3. Iterate through each word in the list.
    -Count the number of consonants in the word.
    -If the count is equal to n, add the word to the list of selected words.
Step 4. Return the list of selected words. "
"How to solve:
Step 1. Sort the array arr in descending order.
Step 2. Return the first k elements of the sorted array. "
"How to solve:
Step 1. Initialize a variable sum as 0.
Step 2. Iterate through the first k elements of arr.
    -For each element, add it to sum.
Step 3. Return sum. "
"How to solve:
Step 1. Check if the intervals intersect. If not, return ""NO"".
Step 2. Find the start and end values of the intersection.
Step 3. Calculate the length of the intersection.
Step 4. Check if the length is a prime number.
    -If it is, return ""YES"".
    -Otherwise, return ""NO"". "
"How to solve:
Step 1. Initialize an empty list to store the Tribonacci sequence.
Step 2. Initialize the first three numbers of the sequence as 1, 3, and 2.
Step 3. If n is less than 3, return the first n numbers of the sequence.
Step 4. Iterate from 3 to n.
    - Calculate the next number of the sequence using the recurrence formula.
    - Append the calculated number to the list.
Step 5. Return the list of the Tribonacci sequence. "
"How to solve:
Step 1. Initialize product as 1.
Step 2. Convert n to a string.
Step 3. Iterate through each character in the string.
    -If the character is odd, multiply it with the product.
Step 4. If product is still 1, return 0.
Step 5. Return the product. "
"How to solve:
Step 1. Initialize a stack to keep track of opening brackets.
Step 2. Iterate through each character in the string.
    -If the character is an opening bracket, push it onto the stack.
    -If the character is a closing bracket, check if the stack is empty. If it is, return False.
    -If the stack is not empty, pop the top element from the stack.
Step 3. After iterating through all characters, check if the stack is empty. If it is, return True. Otherwise, return False. "
"How to solve:
Step 1. Initialize a variable sum_squares as 0.
Step 2. Iterate through the elements in lst.
    -Round each element to the upper int(Ceiling).
    -Square the rounded element.
    -Add the squared element to sum_squares.
Step 3. Return sum_squares. "
"How to solve:
Step 1. Check if the given string is empty. If it is, return False.
Step 2. Get the last character of the string.
Step 3. Check if the last character is an alphabetical character. If it is not, return False.
Step 4. Check if the last character is a part of a word. If it is, return False.
Step 5. Return True. "
"How to solve:
Step 1. Iterate through the array starting from the second element.
Step 2. Check if the current element is not greater than or equal to the previous element.
    -If true, return the index of the current element.
Step 3. If no such element exists, return -1. "
"How to solve:
Step 1. Initialize variables for largest negative integer and smallest positive integer as None.
Step 2. Iterate through the list.
    -If the current integer is negative and largest negative integer is None, update largest negative integer.
    -If the current integer is positive and smallest positive integer is None, update smallest positive integer.
    -If the current integer is negative and largest negative integer is not None, update largest negative integer if the current integer is larger.
    -If the current integer is positive and smallest positive integer is not None, update smallest positive integer if the current integer is smaller.
Step 3. Return the tuple (largest negative integer, smallest positive integer). "
"How to solve:
Step 1. Initialize a variable ""result"" as 1.
Step 2. Iterate from 1 to n.
    -Multiply ""result"" by the current number.
Step 3. Return ""result"". "
"How to solve:
Step 1. Split the sentence into a list of words.
Step 2. Initialize an empty list to store the prime words.
Step 3. Iterate through each word in the list.
    -Check if the length of the word is a prime number.
    -If it is a prime number, add it to the list of prime words.
Step 4. Join the prime words into a string, separated by a space.
Step 5. Return the string of prime words. "
"How to solve:
Step 1. Parse the numerator and denominator of x and n as integers.
Step 2. Check if x * n evaluates to a whole number.
    -If it does, return True.
    -Otherwise, return False. "
"How to solve:
Step 1. Create a helper function to calculate the sum of digits for a given number.
Step 2. Sort the given list of integers based on the sum of their digits.
    -If there are several items with similar sum of digits, order them based on their index in original list.
Step 3. Return the sorted list. "
"How to solve:
Step 1. Initialize a count variable as 0.
Step 2. Iterate through each number in the array.
    -Check if the number is greater than 10 and both its first and last digits are odd.
    -If it meets the condition, increment the count variable.
Step 3. Return the count variable. "
"How to solve:
Step 1. Initialize an empty array a.
Step 2. Iterate from 1 to n.
    - For each i, calculate a[i] = i * i - i + 1.
Step 3. Initialize a counter variable count to 0.
Step 4. Iterate through the array a.
    - For each i, iterate through the array a again starting from i+1.
        - For each j, iterate through the array a again starting from j+1.
            - For each k, check if a[i] + a[j] + a[k] is divisible by 3.
                - If it is, increment count by 1.
Step 5. Return count. "
"How to solve:
Step 1. Create a dictionary to store the planets and their orbits.
Step 2. Check if planet1 and planet2 are correct planet names. If not, return an empty tuple.
Step 3. Find the orbit of planet1 and the orbit of planet2.
Step 4. Iterate through the planets in the dictionary.
    -If the orbit of the current planet is between the orbit of planet1 and the orbit of planet2, add it to a list.
Step 5. Sort the list of planets by their proximity to the sun.
Step 6. Return the sorted list of planets as a tuple. "
"How to solve:
Step 1. Check if n is prime.
    -If n is prime, return x.
    -Otherwise, return y. "
"How to solve:
Step 1. Initialize a variable sum_squares as 0.
Step 2. Iterate through the elements in the input list.
    -If the element is an integer and odd, square it and add it to sum_squares.
Step 3. Return sum_squares. "
"How to solve:
Step 1. Initialize a variable ""strongest_extension"" as an empty string.
Step 2. Initialize a variable ""strongest_strength"" as -Infinity.
Step 3. Iterate through each extension in the list.
    -Calculate the strength of the extension by subtracting the number of uppercase letters from the number of lowercase letters in the extension's name.
    -If the strength is greater than ""strongest_strength"", update ""strongest_strength"" and ""strongest_extension"".
Step 4. Return the class_name concatenated with the ""strongest_extension"". "
"How to solve:
Step 1. Initialize a variable ""rotated"" as False.
Step 2. Iterate through all possible rotations of word b.
    -Check if any of the rotations are a substring in word a.
    -If yes, return True.
Step 3. Return False. "
"How to solve:
Step 1. Create a dictionary to map the integer values to their corresponding roman numeral symbols.
Step 2. Initialize an empty string to store the roman numeral representation.
Step 3. Iterate through the dictionary in descending order of the integer values.
    -While the number is greater than or equal to the current integer value:
        -Append the corresponding roman numeral symbol to the string.
        -Subtract the current integer value from the number.
Step 4. Return the string. "
"How to solve:
Step 1. Check if the sum of any two sides is greater than the third side.
Step 2. If the condition is true for all three combinations of sides, return True.
Step 3. Otherwise, return False. "
"How to solve:
Step 1. Initialize an empty string called ""result"".
Step 2. Iterate through each character in the input string.
    -If the character is a letter, reverse its case and add it to ""result"".
    -Otherwise, add the character as it is to ""result"".
Step 3. If ""result"" is empty, reverse the string and return it.
Step 4. Return ""result"". "
"How to solve:
Step 1. Import the hashlib module.
Step 2. Check if the input string is empty. If it is, return None.
Step 3. Use the hashlib.md5() function to calculate the md5 hash of the input string.
Step 4. Return the md5 hash string. "
"How to solve:
Step 1. Initialize an empty array to store the even digits.
Step 2. Iterate through the range from a to b (inclusive).
    -If the current number is even and not already in the array, add it to the array.
Step 3. Return the array of even digits. "
